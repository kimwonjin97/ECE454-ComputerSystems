        -:    0:Source:/homes/k/kimwonji/ece454/ECE454-Lab2/implementation.c
        -:    0:Graph:bin/CMakeFiles/ECE454_Lab2.dir/implementation.c.gcno
        -:    0:Data:bin/CMakeFiles/ECE454_Lab2.dir/implementation.c.gcda
        -:    0:Runs:1
        -:    1:#include <stdio.h>
        -:    2:#include <string.h>
        -:    3:#include <stdbool.h>
        -:    4:#include "utilities.h"  // DO NOT REMOVE this line
        -:    5:#include "implementation_reference.h"   // DO NOT REMOVE this line
        -:    6:
        -:    7:/***********************************************************************************************************************
        -:    8: * @param buffer_frame - pointer pointing to a buffer storing the imported 24-bit bitmap image
        -:    9: * @param width - width of the imported 24-bit bitmap image
        -:   10: * @param height - height of the imported 24-bit bitmap image
        -:   11: * @param offset - number of pixels to shift the object in bitmap image up
        -:   12: * @return - pointer pointing a buffer storing a modified 24-bit bitmap image
        -:   13: * Note1: White pixels RGB(255,255,255) are treated as background. Object in the image refers to non-white pixels.
        -:   14: * Note2: You can assume the object will never be moved off the screen
        -:   15: **********************************************************************************************************************/
function processMoveUp called 0 returned 0% blocks executed 0%
    #####:   16:unsigned char *processMoveUp(unsigned char *buffer_frame, unsigned width, unsigned height, int offset) {
    #####:   17:    return processMoveUpReference(buffer_frame, width, height, offset);
call    0 never executed
        -:   18:}
        -:   19:
        -:   20:/***********************************************************************************************************************
        -:   21: * @param buffer_frame - pointer pointing to a buffer storing the imported 24-bit bitmap image
        -:   22: * @param width - width of the imported 24-bit bitmap image
        -:   23: * @param height - height of the imported 24-bit bitmap image
        -:   24: * @param offset - number of pixels to shift the object in bitmap image left
        -:   25: * @return - pointer pointing a buffer storing a modified 24-bit bitmap image
        -:   26: * Note1: White pixels RGB(255,255,255) are treated as background. Object in the image refers to non-white pixels.
        -:   27: * Note2: You can assume the object will never be moved off the screen
        -:   28: **********************************************************************************************************************/
function processMoveRight called 0 returned 0% blocks executed 0%
    #####:   29:unsigned char *processMoveRight(unsigned char *buffer_frame, unsigned width, unsigned height, int offset) {
    #####:   30:    return processMoveRightReference(buffer_frame, width, height, offset);
call    0 never executed
        -:   31:}
        -:   32:
        -:   33:/***********************************************************************************************************************
        -:   34: * @param buffer_frame - pointer pointing to a buffer storing the imported 24-bit bitmap image
        -:   35: * @param width - width of the imported 24-bit bitmap image
        -:   36: * @param height - height of the imported 24-bit bitmap image
        -:   37: * @param offset - number of pixels to shift the object in bitmap image up
        -:   38: * @return - pointer pointing a buffer storing a modified 24-bit bitmap image
        -:   39: * Note1: White pixels RGB(255,255,255) are treated as background. Object in the image refers to non-white pixels.
        -:   40: * Note2: You can assume the object will never be moved off the screen
        -:   41: **********************************************************************************************************************/
function processMoveDown called 0 returned 0% blocks executed 0%
    #####:   42:unsigned char *processMoveDown(unsigned char *buffer_frame, unsigned width, unsigned height, int offset) {
    #####:   43:    return processMoveDownReference(buffer_frame, width, height, offset);
call    0 never executed
        -:   44:}
        -:   45:
        -:   46:/***********************************************************************************************************************
        -:   47: * @param buffer_frame - pointer pointing to a buffer storing the imported 24-bit bitmap image
        -:   48: * @param width - width of the imported 24-bit bitmap image
        -:   49: * @param height - height of the imported 24-bit bitmap image
        -:   50: * @param offset - number of pixels to shift the object in bitmap image right
        -:   51: * @return - pointer pointing a buffer storing a modified 24-bit bitmap image
        -:   52: * Note1: White pixels RGB(255,255,255) are treated as background. Object in the image refers to non-white pixels.
        -:   53: * Note2: You can assume the object will never be moved off the screen
        -:   54: **********************************************************************************************************************/
function processMoveLeft called 0 returned 0% blocks executed 0%
    #####:   55:unsigned char *processMoveLeft(unsigned char *buffer_frame, unsigned width, unsigned height, int offset) {
    #####:   56:    return processMoveLeftReference(buffer_frame, width, height, offset);
call    0 never executed
        -:   57:}
        -:   58:
        -:   59:/***********************************************************************************************************************
        -:   60: * @param buffer_frame - pointer pointing to a buffer storing the imported 24-bit bitmap image
        -:   61: * @param width - width of the imported 24-bit bitmap image
        -:   62: * @param height - height of the imported 24-bit bitmap image
        -:   63: * @param rotate_iteration - rotate object inside frame buffer clockwise by 90 degrees, <iteration> times
        -:   64: * @return - pointer pointing a buffer storing a modified 24-bit bitmap image
        -:   65: * Note: You can assume the frame will always be square and you will be rotating the entire image
        -:   66: **********************************************************************************************************************/
function processRotateCW called 0 returned 0% blocks executed 0%
    #####:   67:unsigned char *processRotateCW(unsigned char *buffer_frame, unsigned width, unsigned height,
        -:   68:                               int rotate_iteration) {
    #####:   69:    return processRotateCWReference(buffer_frame, width, height, rotate_iteration);
call    0 never executed
        -:   70:}
        -:   71:
        -:   72:/***********************************************************************************************************************
        -:   73: * @param buffer_frame - pointer pointing to a buffer storing the imported 24-bit bitmap image
        -:   74: * @param width - width of the imported 24-bit bitmap image
        -:   75: * @param height - height of the imported 24-bit bitmap image
        -:   76: * @param rotate_iteration - rotate object inside frame buffer counter clockwise by 90 degrees, <iteration> times
        -:   77: * @return - pointer pointing a buffer storing a modified 24-bit bitmap image
        -:   78: * Note: You can assume the frame will always be square and you will be rotating the entire image
        -:   79: **********************************************************************************************************************/
function processRotateCCW called 0 returned 0% blocks executed 0%
    #####:   80:unsigned char *processRotateCCW(unsigned char *buffer_frame, unsigned width, unsigned height,
        -:   81:                                int rotate_iteration) {
    #####:   82:    return processRotateCCWReference(buffer_frame, width, height, rotate_iteration);
call    0 never executed
        -:   83:}
        -:   84:
        -:   85:/***********************************************************************************************************************
        -:   86: * @param buffer_frame - pointer pointing to a buffer storing the imported 24-bit bitmap image
        -:   87: * @param width - width of the imported 24-bit bitmap image
        -:   88: * @param height - height of the imported 24-bit bitmap image
        -:   89: * @param _unused - this field is unused
        -:   90: * @return
        -:   91: **********************************************************************************************************************/
function processMirrorX called 0 returned 0% blocks executed 0%
    #####:   92:unsigned char *processMirrorX(unsigned char *buffer_frame, unsigned int width, unsigned int height, int _unused) {
    #####:   93:    return processMirrorXReference(buffer_frame, width, height, _unused);
call    0 never executed
        -:   94:}
        -:   95:
        -:   96:/***********************************************************************************************************************
        -:   97: * @param buffer_frame - pointer pointing to a buffer storing the imported 24-bit bitmap image
        -:   98: * @param width - width of the imported 24-bit bitmap image
        -:   99: * @param height - height of the imported 24-bit bitmap image
        -:  100: * @param _unused - this field is unused
        -:  101: * @return
        -:  102: **********************************************************************************************************************/
function processMirrorY called 0 returned 0% blocks executed 0%
    #####:  103:unsigned char *processMirrorY(unsigned char *buffer_frame, unsigned width, unsigned height, int _unused) {
    #####:  104:    return processMirrorYReference(buffer_frame, width, height, _unused);
call    0 never executed
        -:  105:}
        -:  106:
        -:  107:/***********************************************************************************************************************
        -:  108: * WARNING: Do not modify the implementation_driver and team info prototype (name, parameter, return value) !!!
        -:  109: *          Do not forget to modify the team_name and team member information !!!
        -:  110: **********************************************************************************************************************/
function print_team_info called 1 returned 100% blocks executed 100%
        1:  111:void print_team_info(){
        -:  112:    // Please modify this field with something interesting
        1:  113:    char team_name[] = "TTGH";
        -:  114:
        -:  115:    // Please fill in your information
        1:  116:    char student_first_name[] = "Won-Jin";
        1:  117:    char student_last_name[] = "Kim";
        1:  118:    char student_student_number[] = "1003611424";
        -:  119:
        -:  120:    // Printing out team information
        1:  121:    printf("*******************************************************************************************************\n");
call    0 returned 100%
        1:  122:    printf("Team Information:\n");
call    0 returned 100%
        1:  123:    printf("\tteam_name: %s\n", team_name);
call    0 returned 100%
        1:  124:    printf("\tstudent_first_name: %s\n", student_first_name);
call    0 returned 100%
        1:  125:    printf("\tstudent_last_name: %s\n", student_last_name);
call    0 returned 100%
        1:  126:    printf("\tstudent_student_number: %s\n", student_student_number);
call    0 returned 100%
        1:  127:}
        -:  128:
        -:  129:/***********************************************************************************************************************
        -:  130: * WARNING: Do not modify the implementation_driver and team info prototype (name, parameter, return value) !!!
        -:  131: *          You can modify anything else in this file
        -:  132: ***********************************************************************************************************************
        -:  133: * @param sensor_values - structure stores parsed key value pairs of program instructions
        -:  134: * @param sensor_values_count - number of valid sensor values parsed from sensor log file or commandline console
        -:  135: * @param frame_buffer - pointer pointing to a buffer storing the imported  24-bit bitmap image
        -:  136: * @param width - width of the imported 24-bit bitmap image
        -:  137: * @param height - height of the imported 24-bit bitmap image
        -:  138: * @param grading_mode - turns off verification and turn on instrumentation
        -:  139: ***********************************************************************************************************************
        -:  140: *
        -:  141: **********************************************************************************************************************/
        -:  142:
        -:  143:typedef struct 
        -:  144:{
        -:  145:    int row, col;
        -:  146:    int rgb[3];
        -:  147:} Pixel;
        -:  148:
        -:  149:typedef enum
        -:  150:    {
        -:  151:        W, S, A, D, CW, CCW, MX, MY
        -:  152:    }SensorEnum;
        -:  153:    
        -:  154:    const static struct
        -:  155:    {
        -:  156:        const char* str;
        -:  157:        SensorEnum key;
        -:  158:    } key2EnumConv[] = {
        -:  159:        {"W", W}, {"S", S},{"A", A},{"D", D},{"CW", CW}, {"CCW", CCW}, {"MX", MX}, {"MY", MY}
        -:  160:    };
        -:  161:
function Key2Enum called 684 returned 100% blocks executed 86%
      684:  162:SensorEnum Key2Enum(const char* str)
        -:  163:{
     3366:  164:    for(int i=0; i<sizeof(key2EnumConv)/sizeof(key2EnumConv[0]); ++i)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  165:    {
     3366:  166:        if(!strcmp(str, key2EnumConv[i].str))
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  167:        {
      684:  168:            return key2EnumConv[i].key;
        -:  169:        }
        -:  170:    }
    #####:  171:}
        -:  172:
        -:  173:Pixel pixel_with_color[1000000];
        -:  174:
function implementation_driver called 18 returned 100% blocks executed 65%
       18:  175:void implementation_driver(struct kv *sensor_values, int sensor_values_count, unsigned char *frame_buffer,
        -:  176:                           unsigned int width, unsigned int height, bool grading_mode) {
       18:  177:    int processed_frames = 0;
        -:  178:    
       18:  179:    int color_pixel_cnt = 0;
       18:  180:    int temp_pos = 0;
      198:  181:    for(int row=0; row<height; ++row)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  182:    {
     1980:  183:        for(int col=0; col<width; ++col)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  184:        {
     1800:  185:            if(frame_buffer[temp_pos] != 255 || 
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
     1674:  186:               frame_buffer[temp_pos + 1] != 255 || 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1674:  187:               frame_buffer[temp_pos + 2] != 255)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  188:            {
      126:  189:                pixel_with_color[color_pixel_cnt].row = row;
      126:  190:                pixel_with_color[color_pixel_cnt].col = col;
        -:  191:                // pixel_with_color[color_pixel_cnt].rgb[0] = frame_buffer[temp_pos];
        -:  192:                // pixel_with_color[color_pixel_cnt].rgb[1] = frame_buffer[temp_pos+1];
        -:  193:                // pixel_with_color[color_pixel_cnt].rgb[2] = frame_buffer[temp_pos+2];
      126:  194:                memcpy(pixel_with_color[color_pixel_cnt].rgb, frame_buffer+temp_pos, sizeof(temp_pos*3));
      126:  195:                color_pixel_cnt += 1;
        -:  196:            }
     1800:  197:            temp_pos += 3;
        -:  198:        }
        -:  199:    }
        -:  200:
        -:  201:
       18:  202:    int dir_transform[4] = {0,}; //0: up, 1: left, 2: down, 3: right
       18:  203:    int rot_transform = 0;
       18:  204:    bool xMirrored = false;
       18:  205:    bool yMirrored = false;
        -:  206:
       18:  207:    int current_val = 0;
       18:  208:    int idx = 0;
      702:  209:    for (int sensorValueIdx = 0; sensorValueIdx < sensor_values_count; sensorValueIdx++) 
branch  0 taken 97%
branch  1 taken 3% (fallthrough)
        -:  210:    {
      684:  211:        SensorEnum current_key = Key2Enum(sensor_values[sensorValueIdx].key);
call    0 returned 100%
      684:  212:        current_val = sensor_values[sensorValueIdx].value;
      684:  213:        switch(current_key) 
branch  0 taken 13%
branch  1 taken 13%
branch  2 taken 13%
branch  3 taken 13%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 18%
branch  7 taken 29%
branch  8 taken 0%
        -:  214:        {   
       90:  215:            case W:
       90:  216:                idx = !xMirrored ? 0 : 2;
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
       90:  217:                dir_transform[(idx-rot_transform) & 3] += current_val;
       90:  218:                break;
       90:  219:            case S:
       90:  220:                idx = !xMirrored ? 2 : 0;
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
       90:  221:                dir_transform[(idx-rot_transform) & 3] += current_val;
       90:  222:                break;
       90:  223:            case A:
       90:  224:                idx = !yMirrored ? 3 : 1;
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
       90:  225:                dir_transform[(idx-rot_transform) & 3] += current_val;
       90:  226:                break;
       90:  227:            case D:
       90:  228:                idx = !yMirrored ? 1 : 3;
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
       90:  229:                dir_transform[(idx-rot_transform) & 3] += current_val;
       90:  230:                break;
    #####:  231:            case CW:
    #####:  232:                if(xMirrored && yMirrored)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  233:                {
    #####:  234:                    current_val *= -1;
    #####:  235:                    xMirrored = yMirrored = false;
        -:  236:                }
    #####:  237:                else if(xMirrored || yMirrored)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  238:                {
    #####:  239:                    current_val *= -1;
        -:  240:                }
    #####:  241:                rot_transform += current_val;
    #####:  242:                break;
    #####:  243:            case CCW:
    #####:  244:                if(xMirrored && yMirrored)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  245:                {
    #####:  246:                    current_val *= -1;
    #####:  247:                    xMirrored = yMirrored = false;
        -:  248:                }
    #####:  249:                else if(xMirrored || yMirrored)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  250:                {
    #####:  251:                    current_val *= -1;
        -:  252:                }
    #####:  253:                current_val *= -1;
    #####:  254:                rot_transform += current_val;
    #####:  255:                break;
      126:  256:            case MX:
      126:  257:                if(xMirrored)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        -:  258:                {
       54:  259:                    xMirrored = false;
        -:  260:                } else {
       72:  261:                    xMirrored = true;
        -:  262:                }
      126:  263:                break;
      198:  264:            case MY:
        -:  265:                
      198:  266:                if(yMirrored)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
        -:  267:                {
       90:  268:                    yMirrored = false;
        -:  269:                } else {
      108:  270:                    yMirrored = true;
        -:  271:                }
      198:  272:                break;
    #####:  273:            default:
    #####:  274:                break;
        -:  275:        }
        -:  276:
      684:  277:        processed_frames += 1;
      684:  278:        if (processed_frames % 25 == 0) {
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
      144:  279:            for(int i=0; i<color_pixel_cnt; ++i)
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
        -:  280:            {
      126:  281:                int idx = (pixel_with_color[i].row * width + pixel_with_color[i].col) * 3;
      126:  282:                frame_buffer[idx] = 255;
      126:  283:                frame_buffer[idx+1] = 255;
      126:  284:                frame_buffer[idx+2] = 255;
        -:  285:            }
        -:  286:
       18:  287:            int vertical = dir_transform[2] - dir_transform[0];
       18:  288:            int horizontal = dir_transform[1] - dir_transform[3];
        -:  289:
       18:  290:            if(vertical != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  291:            {
    #####:  292:                for(int i=0; i<color_pixel_cnt; ++i)
branch  0 never executed
branch  1 never executed
        -:  293:                {
    #####:  294:                    pixel_with_color[i].row += vertical;
        -:  295:                }
        -:  296:            }
       18:  297:            if (horizontal != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  298:            {
    #####:  299:                for(int i=0; i<color_pixel_cnt; ++i)
branch  0 never executed
branch  1 never executed
        -:  300:                {
    #####:  301:                    pixel_with_color[i].col += horizontal;
        -:  302:                }
        -:  303:            }
       18:  304:            rot_transform %= 4;
       18:  305:            if(rot_transform!=0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  306:            {
    #####:  307:                int render_col = width - 1;
    #####:  308:                int render_row = 0;
    #####:  309:                int rot_cnt = rot_transform > 0 ? rot_transform : -(rot_transform*3);
branch  0 never executed
branch  1 never executed
        -:  310:
    #####:  311:                for(int i=0; i<rot_cnt; ++i)
branch  0 never executed
branch  1 never executed
        -:  312:                {
    #####:  313:                    for(int j=0; j<color_pixel_cnt; ++j)
branch  0 never executed
branch  1 never executed
        -:  314:                    {
    #####:  315:                        int row = pixel_with_color[j].row;
    #####:  316:                        int col = pixel_with_color[j].col;
    #####:  317:                        pixel_with_color[j].col = render_col - row;
    #####:  318:                        pixel_with_color[j].row = render_row + col;
        -:  319:                    }
        -:  320:                }
        -:  321:            
        -:  322:            }
        -:  323:            
       18:  324:            if(xMirrored)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  325:            {
      144:  326:                for(int i=0; i<color_pixel_cnt; ++i)
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
        -:  327:                {
      126:  328:                    pixel_with_color[i].row = (height-1 - pixel_with_color[i].row);
        -:  329:                }
        -:  330:            }
        -:  331:
       18:  332:            if(yMirrored)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  333:            {
    #####:  334:                for(int i=0; i<color_pixel_cnt; ++i)
branch  0 never executed
branch  1 never executed
        -:  335:                {
    #####:  336:                    pixel_with_color[i].col = (width-1 - pixel_with_color[i].col);
        -:  337:                }
        -:  338:            }
        -:  339:
      144:  340:            for(int i=0; i<color_pixel_cnt; ++i)
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
        -:  341:            {
      126:  342:                int idx = (pixel_with_color[i].row * width + pixel_with_color[i].col)*3;
      126:  343:                frame_buffer[idx] = pixel_with_color[i].rgb[0];
      126:  344:                frame_buffer[idx+1] = pixel_with_color[i].rgb[1];
      126:  345:                frame_buffer[idx+2] = pixel_with_color[i].rgb[2];
        -:  346:            }
        -:  347:            
       18:  348:            verifyFrame(frame_buffer, width, height, grading_mode);
call    0 returned 100%
       90:  349:            for(int i = 0; i < 4; i++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
       72:  350:		    	dir_transform[i] = 0;
        -:  351:		    }
       18:  352:            rot_transform = 0;
       18:  353:            xMirrored = false;
       18:  354:            yMirrored = false;
        -:  355:
        -:  356:        }
        -:  357:
        -:  358:    }
       18:  359:    return;
        -:  360:}
